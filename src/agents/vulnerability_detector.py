"""
Vulnerability Detector Agent
Identifies known vulnerabilities and security weaknesses.
"""
import anthropic
import os
from typing import Dict, Any, List


class VulnerabilityDetectorAgent:
    """AI agent that detects vulnerabilities in database configurations."""

    def __init__(self, api_key: str = None):
        """Initialize the agent with Anthropic API key."""
        self.api_key = api_key or os.getenv('ANTHROPIC_API_KEY')
        if not self.api_key:
            raise ValueError("ANTHROPIC_API_KEY must be set")
        self.client = anthropic.Anthropic(api_key=self.api_key)

    def detect(self, db_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        Detect vulnerabilities based on database version and configuration.

        Args:
            db_info: Dictionary containing version, users, and configuration

        Returns:
            Dictionary containing vulnerability findings
        """
        prompt = f"""You are a database security vulnerability expert.
Analyze this database for known vulnerabilities and security weaknesses.

DATABASE VERSION: {db_info.get('version', 'Unknown')}
USER COUNT: {len(db_info.get('users', []))}
SUPERUSERS: {sum(1 for u in db_info.get('users', []) if u.get('is_superuser'))}

SECURITY SETTINGS:
{self._format_security_settings(db_info.get('security_settings', {}))}

ENCRYPTION STATUS:
{self._format_encryption_status(db_info.get('encryption', {}))}

Identify:
1. Known CVEs for this database version
2. Excessive user privileges
3. Weak authentication configurations
4. Missing security features
5. Potential attack vectors

Return JSON:
{{
    "vulnerabilities": [
        {{
            "severity": "critical|high|medium|low",
            "title": "vulnerability name",
            "description": "detailed description",
            "affected_component": "component name",
            "cve_id": "CVE-XXXX-XXXX" or null,
            "remediation": "fix steps",
            "exploitability": "how easily exploitable"
        }}
    ],
    "security_score": 0-100,
    "summary": "overall security assessment"
}}"""

        try:
            message = self.client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=3072,
                messages=[{"role": "user", "content": prompt}]
            )

            response_text = message.content[0].text
            import json
            if "```json" in response_text:
                response_text = response_text.split("```json")[1].split("```")[0].strip()
            elif "```" in response_text:
                response_text = response_text.split("```")[1].split("```")[0].strip()

            return json.loads(response_text)

        except Exception as e:
            return {
                "error": str(e),
                "vulnerabilities": [],
                "security_score": 0,
                "summary": "Error during vulnerability detection"
            }

    def _format_security_settings(self, settings: Dict[str, Any]) -> str:
        """Format security settings for display."""
        lines = []
        for key, value in settings.items():
            if isinstance(value, dict):
                lines.append(f"  {key}: {value.get('value', 'N/A')}")
            else:
                lines.append(f"  {key}: {value}")
        return "\n".join(lines) if lines else "  No security settings provided"

    def _format_encryption_status(self, encryption: Dict[str, bool]) -> str:
        """Format encryption status for display."""
        lines = []
        for key, value in encryption.items():
            status = "✓ Enabled" if value else "✗ Disabled"
            lines.append(f"  {key}: {status}")
        return "\n".join(lines) if lines else "  No encryption info available"
