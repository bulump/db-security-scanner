"""
Report Generator
Creates human-readable security reports.
"""
import json
from datetime import datetime
from typing import Dict, Any


class ReportGenerator:
    """Generates security scan reports in various formats."""

    @staticmethod
    def generate_markdown(report: Dict[str, Any]) -> str:
        """Generate Markdown format report."""
        md = []
        md.append("# Database Security Scan Report\n")
        md.append(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

        # Scan Info
        scan_info = report['scan_info']
        db_info = report['database_info']
        md.append("## Scan Information\n")
        md.append(f"- **Database:** {db_info['database']}")
        md.append(f"- **Host:** {db_info['host']}:{db_info['port']}")
        md.append(f"- **Version:** {db_info['version'][:100]}")
        md.append(f"- **Framework:** {scan_info['compliance_framework']}")
        md.append(f"- **Scanned:** {scan_info['timestamp']}\n")

        # Overall Risk Assessment
        risk = report['overall_risk_assessment']
        risk_emoji = {"critical": "🔴", "high": "🟠", "medium": "🟡", "low": "🟢"}
        md.append("## Overall Risk Assessment\n")
        md.append(f"**Security Score:** {risk['security_score']}/100")
        md.append(f"**Risk Level:** {risk_emoji.get(risk['risk_level'], '')} {risk['risk_level'].upper()}\n")
        md.append(f"- Critical Issues: {risk['critical_issue_count']}")
        md.append(f"- Warnings: {risk['warning_count']}")
        md.append(f"- Vulnerabilities: {risk['vulnerability_count']}")
        md.append(f"- Compliance: {risk['compliance_percentage']}%\n")

        # Configuration Analysis
        config_analysis = report['config_analysis']
        if 'error' not in config_analysis and config_analysis.get('issues'):
            md.append("## Configuration Analysis\n")

            critical_issues = [i for i in config_analysis['issues'] if i.get('severity') == 'critical']
            if critical_issues:
                md.append("### 🔴 Critical Issues\n")
                for issue in critical_issues:
                    md.append(f"#### {issue['title']}")
                    md.append(f"- **Issue:** {issue['description']}")
                    md.append(f"- **Remediation:** {issue['remediation']}\n")

            other_issues = [i for i in config_analysis['issues'] if i.get('severity') != 'critical']
            if other_issues:
                md.append("### ⚠️  Warnings\n")
                for issue in other_issues[:5]:  # Limit to 5
                    md.append(f"- **{issue['title']}:** {issue['description']}")

        # Vulnerability Analysis
        vuln_analysis = report['vulnerability_analysis']
        if 'error' not in vuln_analysis and vuln_analysis.get('vulnerabilities'):
            md.append("\n## Vulnerability Analysis\n")
            md.append(f"**Vulnerabilities Found:** {len(vuln_analysis['vulnerabilities'])}\n")
            for vuln in vuln_analysis['vulnerabilities'][:5]:
                severity_emoji = {"critical": "🔴", "high": "🟠", "medium": "🟡", "low": "🟢"}
                md.append(f"### {severity_emoji.get(vuln['severity'], '')} {vuln['title']}")
                md.append(f"- **Severity:** {vuln['severity'].upper()}")
                if vuln.get('cve_id'):
                    md.append(f"- **CVE:** {vuln['cve_id']}")
                md.append(f"- **Description:** {vuln['description']}")
                md.append(f"- **Remediation:** {vuln['remediation']}\n")

        # Compliance Analysis
        compliance = report['compliance_analysis']
        if 'error' not in compliance:
            md.append(f"\n## {scan_info['compliance_framework']} Compliance\n")
            md.append(f"**Passed:** {compliance['passed_checks']}/{compliance['total_checks']}")
            md.append(f"**Compliance:** {compliance['compliance_percentage']:.1f}%\n")

            if compliance.get('failed_checks'):
                md.append("### Failed Checks\n")
                for check in compliance['failed_checks'][:10]:
                    md.append(f"#### [{check['check_id']}] {check['title']}")
                    md.append(f"- **Severity:** {check.get('severity', 'N/A').upper()}")
                    md.append(f"- **Requirement:** {check['requirement']}")
                    md.append(f"- **Current:** {check['current_value']}")
                    md.append(f"- **Remediation:** {check['remediation']}\n")

        md.append("\n---")
        md.append("\n*Generated by AI-Powered Database Security Scanner*")
        md.append("\n*Combining 20+ years of database security expertise with modern AI*\n")

        return "\n".join(md)

    @staticmethod
    def generate_html(report: Dict[str, Any]) -> str:
        """Generate HTML format report."""
        # For now, wrap markdown in HTML
        md_content = ReportGenerator.generate_markdown(report)
        html = f"""<!DOCTYPE html>
<html>
<head>
    <title>Database Security Scan Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }}
        h1, h2, h3 {{ color: #333; }}
        code {{ background: #f4f4f4; padding: 2px 6px; border-radius: 3px; }}
        pre {{ background: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }}
    </style>
</head>
<body>
    <pre>{md_content}</pre>
</body>
</html>"""
        return html

    @staticmethod
    def generate_json(report: Dict[str, Any]) -> str:
        """Generate JSON format report."""
        return json.dumps(report, indent=2)
